# -*- coding: utf-8 -*-
"""Youtube_transcipt_RAG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KHD4snm3F4xQlcjgsSTZbXe8FaMTm-Na
"""

import os
os.environ["HUGGINGFACEHUB_API_TOKEN"] = "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"

!pip install -q youtube-transcript-api langchain-community langchain-openai \
               faiss-cpu tiktoken python-dotenv

!pip install langchain-huggingface

!pip show langchain-huggingface

from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings
# from langchain_huggingface import HuggingFaceHub
from langchain.llms import HuggingFaceHub
from langchain_community.vectorstores import FAISS
from langchain_core.prompts import PromptTemplate

video_id = "_1f-o0nqpEI" # only the ID, not full URL
try:
    # If you don’t care which language, this returns the “best” one
    transcript_list = YouTubeTranscriptApi.get_transcript(video_id, languages=["en"])

    # Flatten it to plain text
    transcript = " ".join(chunk["text"] for chunk in transcript_list)
    print(transcript)

except TranscriptsDisabled:
    print("No captions available for this video.")

transcript_list

splitter = RecursiveCharacterTextSplitter(chunk_size=1500, chunk_overlap=250)
chunks = splitter.create_documents([transcript])

len(chunks)

chunks[169]

import os

if "COLAB_GPU" in os.environ:
  !huggingface-cli login
else:
  notebook_login()

from sentence_transformers import SentenceTransformer
from langchain.vectorstores import FAISS
from langchain.embeddings import HuggingFaceEmbeddings
embedding_model = HuggingFaceEmbeddings(model_name="all-MiniLM-L6-v2")
vector_store = FAISS.from_documents(chunks, embedding_model)

vector_store.index_to_docstore_id

vector_store.get_by_ids(["8a1fcb38-0fbb-4bde-a973-4d12284616db"])

retriever = vector_store.as_retriever(search_type="similarity", search_kwargs={"k": 4})

retriever

retriever.invoke('What is GPU')

from transformers import pipeline

model = pipeline("text2text-generation", model="google/flan-t5-small")
response = model("What is the capital of France?", max_new_tokens=50)[0]["generated_text"]
print(response)



# llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.2)

prompt = PromptTemplate(
    template="""
      You are a helpful assistant.
      Answer ONLY from the provided transcript context.
      If the context is insufficient, just say you don't know.

      {context}
      Question: {question}
    """,
    input_variables = ['context', 'question']
)

question          = "is the topic of nuclear fusion discussed in this video? if yes then what was discussed"
retrieved_docs    = retriever.invoke(question)

retrieved_docs
# Assuming `docs` is your list of Document objects (like the one you pasted)

readable_texts = []

for doc in retrieved_docs:
    context_text = doc.page_content.replace('\n', ' ').strip()
    readable_texts.append(context_text)

# Print or process each cleaned document
for i, text in enumerate(readable_texts):
    print(f"--- Document {i+1} ---\n{text}\n")

final_prompt = prompt.invoke({"context": context_text, "question": question})

final_prompt

answer = llm.invoke(final_prompt)
print(answer.content)

from langchain_core.runnables import RunnableParallel, RunnablePassthrough, RunnableLambda
from langchain_core.output_parsers import StrOutputParser

def format_docs(retrieved_docs):
  context_text = "\n\n".join(doc.page_content for doc in retrieved_docs)
  return context_text

!pip install langchain-community

!pip show langchain-community

from langchain.vectorstores import FAISS

# Assuming `vector_store` is your FAISS store already created
retriever = vector_store.as_retriever()

from langchain.schema.runnable import RunnableLambda, RunnablePassthrough, RunnableParallel

parallel_chain = RunnableParallel({
    'context': retriever | RunnableLambda(format_docs),
    'question': RunnablePassthrough()
})

parallel_chain = RunnableParallel({
    'context': retriever | RunnableLambda(format_docs),
    'question': RunnablePassthrough()
})

parallel_chain.invoke('what is deepseek')

parser = StrOutputParser()

main_chain = parallel_chain | prompt | parser